* Why learn q ?
  - fast (/faster than Python or R/) and big data ready. Why?
    - prefers vectors over loops: vector-based ops are very fast (SIMD, SSE, AVX512 ...)
    - prefers binary over text
    - prefers mmap over stdio read/write
    - code lives right next to the data, so no transmission cost
    - kdb+ is columnar DBMS, so optimal use of locality during full-table scans
    - in-memory when real-time; historical on disk stored column-wise and sequential read (in 4,096 blocks)
    - terse
    - compact data structures optimised to use L1 and L2 caches
    - parallelisation built-in natively (functional programming)
    - clever optimisations and reuse of [[http://kparc.com/k.txt][just ~50 primitives]]
    - column attributes optimise qsql queries
  - well-established, growing, well-paid, well-integrated with other tech


[[https://adtmag.com/articles/2019/04/11/~/media/ECG/adtmag/Images/2018/09/slashdata_languages.asxh][popular languages now]], [[https://www.youtube.com/watch?v=Og847HVwRSI][popular languages in time]], [[https://github.com/KxSystems/kdb/blob/master/lisp.txt][heritage]],  [[https://www.itjobswatch.co.uk/jobs/london/python.do][Python jobs in London]], [[https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition][FizzBuzz]], [[https://www.google.com/search?q=time+series+database+popularity&rlz=1C1GCEA_enGB869GB869&source=lnms&tbm=isch&sa=X&ved=2ahUKEwjK85f4vL3nAhWSLewKHRh_DjAQ_AUoAnoECA4QBA&biw=3072&bih=1626#imgrc=9ZZq0_6jIrtCXM][time series database popularity]], [[https://kx.com/blog/what-makes-time-series-database-kdb-so-fast/][tsdb benchmarks]], [[https://danluu.com/empirical-pl/][static typing no better than dynamic]], [[https://code.kx.com/v2/basics/datatypes/][q datatypes]], [[https://code.kx.com/v2/ref/iterators/][iterators]], [[http://kparc.com/d.txt][qsql expressivity]]  [[ https://github.com/KxSystems/kdb/blob/master/e/tpcd.q][2]]  [[https://www.itjobswatch.co.uk/jobs/london/kdb.do][q salaries command 40% premium]]
**** Myth debunked: I have to admit that q is convenient for manipulating datasets but q doesn't have those built-packages like Python. q can't do complicated statistical analysis like Python.
q is Turing complete, general purpose, functional style programming language, and you can do anything in q that you could do in Python, [[https://www.linkedin.com/pulse/python-data-analysis-really-simple-ferenc-bodon-ph-d-/][only much simpler and faster]].
On the other hand, Python doesn't have everything q does: q comes with seamless built-in database. Python has to interface (slow) with another database, often translating queries to SQL and [[https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch][incurring cost due to object-relational impendance mismatch]]. That's both runtime and developer time bottleneck.

You can naturally do [[https://www.amazon.co.uk/Machine-Learning-Data-Wiley-Finance/dp/1119404754/ref=sr_1_fkmr0_1?keywords=machine+learning+in+kdb&qid=1581069249&sr=8-1-fkmr0][machine learning in q]], for example check this complete [[https://github.com/psaris/funq/blob/master/ml.q][machine learning library written in just 1000 lines]], where verbose languages would consume multiple times more. Or serve websites, [[https://code.kx.com/q4m3/1_Q_Shock_and_Awe/#121-websockets-101][for example using WebSockets]].
**** q reads like ASCII dump, is too terse, write-only and hard to be productive in.
#+BEGIN_QUOTE
By relieving the brain of all unnecessary work, a good notation sets it free to concentrate on more advanced problems, and in effect increases the mental power of the race.                      -- A.N. Whitehead
#+END_QUOTE

#+BEGIN_QUOTE
The quantity of meaning compressed into small space by algebraic signs, is another circumstance that facilitates the reasonings we are accustomed to carry on by their aid.                     -- Charles Babbage
#+END_QUOTE


** forget OOP, why functional
 [[https://medium.com/better-programming/object-oriented-programming-the-trillion-dollar-disaster-92a4b666c7c7][OOP: Trillion dollar disaster]],
 [[https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch][Object-relational impendance mismatch]]
#+BEGIN_QUOTE
Alan Kay:
[[http://wiki.c2.com/?AlanKayOnMessaging][ I'm sorry that I long ago coined the term "objects" for this topic because it gets many people to focus on the lesser idea. The big idea is "messaging"]]
#+END_QUOTE

Alan Kay’s big idea was to have independent programs (cells) communicate by sending messages to each other. The state of the independent programs would never be shared with the outside world (encapsulation).
That’s it. OOP was never intended to have things like inheritance, polymorphism, the “new” keyword, and the myriad of design patterns.

#+BEGIN_QUOTE
Dijkstra: "our intellectual powers are rather geared to master static relations and that our powers to visualize processes evolving in time are relatively poorly developed."
#+END_QUOTE

#+BEGIN_QUOTE
Torvalds: "I'm a huge proponent of designing your code around the data, rather than the other way around." "Bad programmers worry about the code. Good programmers worry about data structures and their relationships."
#+END_QUOTE

#+BEGIN_QUOTE
Joe Armstrong (Erlang): The problem with object-oriented languages is they’ve got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle.
#+END_QUOTE
- encourages promiscuous sharing of mutable state
- non-deterministic: 2+2 or calculator.Add(2,2): dependencies of Calculator might change the result in subtle ways
- complexity, with numerous design patterns
- no theoretical foundation came out of proper research institution, like lambda calculus
- human brains evolved to do things, not organize world into complex hierarchies of abstract objects
* Where is it useful?

  - finance
  - blockchain - trade processing platform [[https://kx.com/blog/kx-technology-integrated-into-innovative-blockchain-trade-processing-platform/][Cobalt DL: trade processing plaform]]
  - any industry with real-time analytics or big data needs (recently IoT, manufacturing, retail, space, ...)
* What's q/kdb+ ?
functional, array, dynamic, static, turing complete; in-memory database with disk persistence; high level abstractions: C->k->q/qsql->kdb+; 350kb interpreter runtime, REPL, interactive

#+BEGIN_SRC ditaa -i :exports results :file whatq.png :cmdline -s 0.8
/-----
| q/kdb+
|
   +--------+     +--------+     +--------+
   |        |     |        |     |{s}     |
   | Python +---->+   SQL  +---->+   DB   |
   |        |     |        |     |        |
   +--------+     +--------+     +--------+  |
                                             |
                                         ----/

#+END_SRC

#+RESULTS:
[[file:whatq.png]]

** no need for messaging middleware (Tibco et al.)

#+BEGIN_QUOTE
Today almost all the trading happens electronically. If your requirement is not to loose any order or execution received from either client or exchange, Tibco EMS caters to this requirement by:

1. providing durable topic which holds the data until every subscriber consumes it
2. guaranteeing data will not get lost during network transmission
#+END_QUOTE

q/kdb+ pub/sub architecture can satisfy both requirements by logging any topically organised messages to disk and any subscriber can replay (consume) these persisted messages if it ever crashes. Data loss over network downstream of publisher is remedied by publisher having output queues on the socket and subscriber reading off that queue.

* Use cases
1. data analysis (OLAP, prototyping):
 - [[https://www.amazon.co.uk/Machine-Learning-Data-Wiley-Finance/dp/1119404754/ref=sr_1_fkmr0_1?keywords=machine+learning+in+kdb&qid=1581069249&sr=8-1-fkmr0][machine learning in q]] , [[https://github.com/psaris/funq/blob/master/ml.q][ml in 1000 lines]]
2. streaming and CEP (atomic OLTP):
 - tick architecture
2. batch big data: (batch OLTP/OLAP)):
 - [[https://tech.marksblogg.com/benchmarks.html][fastest CPU database]], [[https://tech.marksblogg.com/billion-nyc-taxi-kdb.html][1.1bn taxi rides]]
* key takeaways
use FP, versatile, productive time, impactful, worthwhile
